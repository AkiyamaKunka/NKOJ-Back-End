const {PUBLIC_PATH, DIST_PATH} = require('./config/basic')
const express = require('express')
const app = express()
const api = require('./api/api')
const session = require('./lib/session')
const prototype = require('./lib/prototype')

const bodyParser = require('body-parser')
const logger = require('morgan')

// DEV: remove
const proxy = require('http-proxy-middleware')
app.use('/old', proxy({target: 'http://220.113.20.2/new', changeOrigin: false}))
app.use('/nkcoj', proxy({target: 'http://220.113.20.2/nkcoj', changeOrigin: false}))
// DEV: temporary workaround
app.get('/new', (req, res) => {
  res.redirect(301, '/')
})

// Disable Header 'X-Powered-By' added by express.
app.disable('x-powered-by')

// DEV: request logger
app.use(logger('dev'))

// DEV: PPT JSON
app.set('json spaces', 4)

app.use(session)
app.use(prototype.setResponsePrototype)

// DEV: Added when debugging from localhost or other server
app.use(function (req, res, next) {
  res.set('Access-Control-Allow-Credentials', 'true')
  res.set('Access-Control-Allow-Origin', req.headers.origin || '*')
  res.set('Access-Control-Allow-Headers', 'Content-Type')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE')
  next()
})

app.use('/public', express.static(PUBLIC_PATH, {fallthrough: false}))

// Catch internal error
// app.use((err, req, res, next) => {
//   'use strict'
//   if (err instanceof Error)
//     res.fatal(500, err)
//   else next()
// })

app.use(bodyParser.json({limit: '233kb'}))

// Catch error generated by bodyParser (Usually size limit exceeded)
// app.use((err, req, res, next) => {
//   'use strict'
//   if (err instanceof Error)
//     res.fatal(err.status, err)
//   else next()
// })

// This defaults to 100kb
app.use(bodyParser.urlencoded({extended: true}))

// Dispatch to router
app.use('/api', api)

app.use('/', express.static(DIST_PATH, {fallthrough: true}))

app.get(/^.+$/, (req, res) => {
  res.sendFile(`${DIST_PATH}/index.html`, {acceptRanges: false})
})

app.use((req, res) => {
  res.fatal(404)
})

app.use((err, req, res) => {
  // DEV: remove
  res.fatal(err.status || 500, err.stack || err)
})

module.exports = app
